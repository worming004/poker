<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Poker planning</title>
    <link rel="stylesheet" href="static/main.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="/static/stateWriter.js"></script>
    <script>

        var conn;
        var playerName;
        var playerID;
        var roomID

        window.onload = function () {
            var board = document.getElementById('board');
            var selection = document.getElementById('selection');
            var roomActions = document.getElementById('roomActions');

            function populateCards(data) {
                data.cards.forEach(elem => {
                    let item = document.createElement('div');
                    item.classList.add('column');
                    item.innerHTML = `<span class="column"><button onclick="sendCardSelection('${elem}')" class="cardbutton" id="card${elem}">${elem}</button></span>`
                    selection.appendChild(item);
                });
            }

            if (window['WebSocket']) {
                $.getJSON('/newid', function (data) {
                    playerID = data.id
                    const urlParams = new URLSearchParams(window.location.search);
                    const password = urlParams.get('password')
                    conn = new WebSocket('ws://' + document.location.host + `/connect?password=${password}&playerid=${playerID}`);
                    conn.onclose = function (evt) {
                        if (evt.code === 1006) {
                            alert('connection closed. Probably you missed the password');
                        } else {
                            alert('connection closed');
                        }
                    };
                    conn.onmessage = function (evt) {
                        const response = JSON.parse(evt.data)
                        switch (response.actionType) {
                            case 'refreshState':
                                updateBoardState(board, selection, roomActions, playerName, playerID, roomID, response.payload);
                                break;
                            case 'refreshCards':
                                populateCards(response.payload)
                                break;
                        }
                    };
                });
            } else {
                alert('Your browser does not support WebSockets');
            }

            var nameform = document.getElementById('form')
            nameform.onsubmit = function () {
                document.getElementById('btnsend').disabled = true;
                if (!conn) {
                    return false;
                }
                if (!player.value) {
                    return false;
                }
                if (!room.value) {
                    return false;
                }
                const roomInt = parseInt(room.value);
                let event = {
                    Action: 'actionAddPlayer',
                    PlayerID: playerID,
                    RoomID: roomInt,
                    Payload: {
                        PlayerName: player.value
                    }
                }
                conn.send(JSON.stringify(event));
                playerName = player.value;
                roomID = roomInt;
                nameform.parentNode.removeChild(nameform);

                return false;
            };
        }
        function sendCardSelection(val) {
            let event = {
                Action: 'actionPlayerSelectCard',
                PlayerID: playerID,
                RoomID: roomID,
                Payload: {
                    Card: val
                }
            }
            conn.send(JSON.stringify(event));
        }

        function reveal() {
            let event = {
                Action: 'actionRoomShowCard',
                RoomID: roomID,
            }
            conn.send(JSON.stringify(event));
        }

        function reset() {
            let event = {
                Action: 'actionRoomResetCard',
                RoomID: roomID,
            }
            conn.send(JSON.stringify(event));
        }
    </script>
</head>

<body>
    <div id="index-container">
        <div class="row">
            <div id="board" class="two-column card"></div>
            <div id="menu" class="two-column card">
                <form id="form">
                    <p>Please, select a name and a room</p>
                    <label for=" player">Nom:</label>
                    <input type="text" id="player" autofocus />
                    <br>
                    <label for="room">Room:</label>
                    <input type="number" id="room" autofocus />
                    <input type="submit" value="Send" id="btnsend" />
                </form>
                <div id="roomActions" class="row" style="display: none;">
                    <p>Board actions:</p>
                    <button onclick="reveal()" class="action-button">reveal</button>
                    <button onclick="reset()" class="action-button">reset</button>
                </div>
            </div>
        </div>
        <div id="selection" class="card row"></div>
        <div class="card row">
            <p>This application is open source. Report an issue on <a href="https://github.com/worming004/poker"> github</a></p>
        </div>
    </div>
</body>

</html>